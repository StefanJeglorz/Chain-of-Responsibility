@page "/projects"
@using Demo.Business.Projects
@using Demo.Shared.DTOs;
@inject IProjectAPI api
@inject NavigationManager navigationManager

<PageTitle>Projects</PageTitle>

<FluentHeader>
    Projects
    <FluentButton Loading=loading IconEnd="@(new Icons.Regular.Size20.ProjectionScreen())" OnClick=AddBrokenProject Appearance=Appearance.Lightweight Style="margin-left:auto">Add new broken project</FluentButton>
</FluentHeader>

<FluentBodyContent>
    <div style="height:100%; overflow: auto;">
        <FluentDataGrid TGridItem=ProjectDTO OnRowFocus=OnRowFocused GenerateHeader="GenerateHeaderOption.Sticky" Items="@projects">
            <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Title)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Number)" Sortable="true" />
        </FluentDataGrid>
    </div>
</FluentBodyContent>

@code {
    IQueryable<ProjectDTO> projects;
    bool loading = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        projects = (await api.GetProjectsAsync()).AsQueryable();
    }

    private async Task AddBrokenProject()
    {
        loading = true;
        await api.AddBrokenProjectAsync();
        await LoadData();
        loading = false;
    }

    private void OnRowFocused(FluentDataGridRow<ProjectDTO> row)
    {
        navigationManager.NavigateTo($"/projects/{row.Item?.Id}");
    }
}